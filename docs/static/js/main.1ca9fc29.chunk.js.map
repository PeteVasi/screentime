{"version":3,"sources":["TimerRow.jsx","TimerSet.jsx","App.js","index.js"],"names":["TimerRow","props","state","remaining","timeRemaining","elapsed","isRunning","isJustExpired","isExpired","isAdminMode","startTimer","bind","stopTimer","plus10","minus10","tick","confirmExpired","clearInterval","this","timer","prevProps","setState","remains","moment","utc","format","className","name","onClick","disabled","start","Date","now","setInterval","timeUpdated","Component","TimerSet","loaded","updateTimeLeft","resetUserTimeOnNewDay","checkDayPassed","getFromCookie","setCookie","DEFAULT_TIME_LEFT","users","usersJson","JSON","parse","timeLeft","forEach","user","map","index","t","userName","newTimeLeft","stringify","today","date","getMonth","getDate","getFullYear","dateCookie","cname","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","cvalue","App","inputPin","adminMode","handleChange","type","value","onChange","event","target","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1ca9fc29.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\n\nexport class TimerRow extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            remaining: this.props.timeRemaining,\n            elapsed: 0,\n            isRunning: false,\n            isJustExpired: false,\n            isExpired: (this.props.timeRemaining <= 0),\n            isAdminMode: this.props.isAdminMode\n        };\n        this.startTimer = this.startTimer.bind(this);\n        this.stopTimer = this.stopTimer.bind(this);\n        this.plus10 = this.plus10.bind(this);\n        this.minus10 = this.minus10.bind(this);\n        this.tick = this.tick.bind(this);\n        this.confirmExpired = this.confirmExpired.bind(this);\n    }\n\n    componentWillUnmount() {\n        // This method is called immediately before the component is removed from the page and destroyed.\n        clearInterval(this.timer);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (!this.state.isRunning && (this.props.timeRemaining !== prevProps.timeRemaining || this.props.isAdminMode !== prevProps.isAdminMode)) {\n            this.setState({\n                remaining: this.props.timeRemaining,\n                elapsed: 0,\n                isRunning: false,\n                isJustExpired: false,\n                isExpired: (this.props.timeRemaining <= 0),\n                isAdminMode: this.props.isAdminMode\n            });\n        }\n    }\n\n    render() {\n        var remains = moment.utc(this.state.remaining - this.state.elapsed).format(\"H:mm:ss\");\n        return (\n            <div className='timer-row'>\n                <div className='timer-name'>{this.props.name}:</div>\n                {!this.state.isExpired\n                        ? <div className='timer-remains'>{remains}</div>\n                        : <div className='timer-timeup'>Time's up!</div>}\n                {!this.state.isExpired &&\n                    <div className='timer-buttons'>\n                        <button onClick={this.startTimer} disabled={this.state.isRunning}>Start</button>\n                        <button onClick={this.stopTimer} disabled={!this.state.isRunning}>Stop</button>\n                    </div>\n                }\n                {this.state.isJustExpired &&\n                    <div className='timer-buttons'>\n                        <button onClick={this.confirmExpired}>Ok</button>\n                    </div>\n                }\n                {this.state.isAdminMode &&\n                    <div className='timer-buttons'>\n                        <button onClick={this.minus10}>-10</button>\n                        <button onClick={this.plus10}>+10</button>\n                    </div>\n                }\n            </div>\n        );\n    }\n\n    startTimer() {\n        this.setState({start: Date.now(), isRunning: true});\n        this.timer = setInterval(this.tick, 100);\n    }\n\n    stopTimer() {\n        clearInterval(this.timer);\n        var remains = this.state.remaining - this.state.elapsed;\n        this.setState({remaining: remains, elapsed: 0, isRunning: false});\n    }\n\n    plus10() {\n        var remains = this.state.remaining + (10 * 60 * 1000);\n        this.setState({remaining: remains, elapsed: 0});\n        if(this.props.timeUpdated) {\n            this.props.timeUpdated(remains);\n        }\n    }\n\n    minus10() {\n        var remains = this.state.remaining - (10 * 60 * 1000);\n        this.setState({remaining: (remains < 0 ? 0 : remains), elapsed: 0});\n        if(this.props.timeUpdated) {\n            this.props.timeUpdated(remains < 0 ? 0 : remains);\n        }\n    }\n\n    tick() {\n        var elapsed = new Date() - this.state.start;\n        if(this.state.remaining - elapsed <= 0) {\n            clearInterval(this.timer);\n            this.setState({\n                remaining: 0,\n                elapsed: 0,\n                isRunning: false,\n                isExpired: true,\n                isJustExpired: true\n            });\n            if(this.props.timeUpdated) {\n                this.props.timeUpdated(0);\n            }\n        } else {\n            this.setState({elapsed: elapsed});\n            if(this.props.timeUpdated) {\n                this.props.timeUpdated(this.state.remaining - elapsed);\n            }\n        }\n    }\n\n    confirmExpired() {\n        this.setState({isJustExpired: false});\n    }\n};\n","import React, { Component } from 'react';\nimport { TimerRow } from './TimerRow';\n\nexport class TimerSet extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            isAdminMode: this.props.isAdminMode\n        };\n        this.updateTimeLeft = this.updateTimeLeft.bind(this);\n        this.resetUserTimeOnNewDay = this.resetUserTimeOnNewDay.bind(this);\n        this.checkDayPassed = this.checkDayPassed.bind(this);\n        this.getFromCookie = this.getFromCookie.bind(this);\n        this.setCookie = this.setCookie.bind(this);\n        this.DEFAULT_TIME_LEFT = 2.5 * 60 * 60 * 1000;\n        //this.DEFAULT_TIME_LEFT = 10000;  // For testing purposes...\n    }\n\n    componentDidMount() {\n        let users = [{}];\n        var usersJson = this.getFromCookie('users');\n        if (usersJson) {\n            users = JSON.parse(usersJson);\n        } else {\n            users = [\n                {\n                    name: \"Ethan\",\n                    timeLeft: this.DEFAULT_TIME_LEFT\n                },\n                {\n                    name: \"Noah\",\n                    timeLeft: this.DEFAULT_TIME_LEFT\n                }\n            ];\n        }\n\n        if (this.checkDayPassed()) {\n            users.forEach((user) => user.timeLeft = this.DEFAULT_TIME_LEFT);\n        }\n\n        this.setState({\n            users: users,\n            loaded: true\n        });\n\n        setInterval(this.resetUserTimeOnNewDay, 60 * 1000);\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.isAdminMode !== prevProps.isAdminMode) {\n            this.setState({\n                isAdminMode: this.props.isAdminMode\n            });\n        }\n    }\n\n    render() {\n        if (!this.state.loaded) {\n            return <div>Loading...</div>;\n\n        } else {\n            return (\n                <div>\n                    {this.state.users.map((user, index) => {\n                        return (\n                            <TimerRow key={index}\n                                      name={user.name}\n                                      timeRemaining={user.timeLeft}\n                                      timeUpdated={(t) => { this.updateTimeLeft(user.name, t); }}\n                                      isAdminMode={this.state.isAdminMode}\n                                      />\n                        );\n                        }\n                    )}\n                </div>\n            );\n        }\n    }\n\n    updateTimeLeft(userName, newTimeLeft) {\n        var users = JSON.parse(JSON.stringify(this.state.users));\n        users.forEach(user => {\n            if (user.name === userName) {\n                user.timeLeft = newTimeLeft;\n            }\n        });\n        this.setState({users: users});\n        this.setCookie('users', JSON.stringify(users));\n    }\n\n    resetUserTimeOnNewDay() {\n        if (this.checkDayPassed()) {\n            var users = JSON.parse(JSON.stringify(this.state.users));\n            users.forEach((user) => user.timeLeft = this.DEFAULT_TIME_LEFT);\n            this.setState({users: users});\n            this.setCookie('users', JSON.stringify(users));\n        }\n    }\n\n    checkDayPassed() {\n        // Would be nice, but also doesn't work in IE11rt\n        //var date = new Date().toLocaleDateString();\n        var today = new Date();\n        var date = (today.getMonth()+1) + \"/\" + today.getDate() + \"/\" + today.getFullYear();\n        var dateCookie = this.getFromCookie('day_reset');\n        if (dateCookie && dateCookie === date) {\n            return false;\n        } else {\n            this.setCookie('day_reset', date);\n            return true;\n        }\n    }\n\n    getFromCookie(cname) {\n        // Would be nice to use this, but WinRT IE11 Metro does not seem to support localStorage :(\n        //if (localStorage.hasOwnProperty(cname)) {\n        //    return localStorage.getItem(cname);\n        //} else {\n        //    return false;\n        //}\n\n        var name = cname + \"=\";\n        // TODO: also not in IE11rt?:   var decodedCookie = decodeURIComponent(document.cookie);\n        var decodedCookie = document.cookie;\n        var ca = decodedCookie.split(';');\n        for(var i = 0; i <ca.length; i++) {\n            var c = ca[i];\n            while (c.charAt(0) === ' ') {\n                c = c.substring(1);\n            }\n            if (c.indexOf(name) === 0) {\n                return c.substring(name.length, c.length);\n            }\n        }\n        return false;\n    }\n    \n    setCookie(cname, cvalue) {\n        // Would be nice to use this, but WinRT IE11 Metro does not seem to support localStorage :(\n        //localStorage.setItem(cname, cvalue);\n        document.cookie = cname + \"=\" + cvalue;\n    }\n};\n","import React, { Component } from 'react';\nimport { TimerSet } from './TimerSet';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isAdminMode: false,\n            inputPin: \"\"\n        };\n        this.adminMode = this.adminMode.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1 className=\"App-title\">Screen Time</h1>\n                </header>\n                <TimerSet isAdminMode={this.state.isAdminMode}/>\n                <br />\n                <br />\n                <br />\n                <div className=\"admin-area\">\n                    <input type=\"password\" name=\"pinCode\" value={this.state.inputPin} onChange={this.handleChange} />\n                    <button onClick={this.adminMode}>{this.state.isAdminMode ? \"Done\" : \"Edit\"}</button>\n                </div>\n            </div>\n        );\n    }\n\n    handleChange(event) {\n        this.setState({inputPin: event.target.value});\n    }\n\n    adminMode() {\n        if(this.state.isAdminMode)  {\n            this.setState({isAdminMode: false, inputPin: \"\"});\n        } else if(this.state.inputPin === \"45152\") {\n            this.setState({isAdminMode: true, inputPin: \"\"});\n        }\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n//registerServiceWorker();\n"],"sourceRoot":""}